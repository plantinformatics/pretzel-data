# generated by ChatGPT in this dialog : https://chatgpt.com/share/67ac97da-67dc-800e-b3d9-083b66d6a187

import pandas as pd

def process_supplementary_table(input_file, output_file):
    # Read the input Excel file, skipping the first two rows
    df = pd.read_excel(input_file, sheet_name='Suppl. Table S1', skiprows=2)
    
    # Remove trailing empty rows (rows where the first column is empty)
    df = df.dropna(subset=['Chromosome'])
    
    # Define base columns
    base_columns = ['Chromosome', 'Start', 'End', 'qseq', 'gene_pep', 'Gap', 'CDS', 'gene']
    
    # Extract base data
    result_rows = []
    for idx, row in df.iterrows():
        base_row = {col: row[col] for col in base_columns}
        base_row['Name'] = row['gene_pep']  # Rename gene_pep to Name
        del base_row['gene_pep']  # Remove original gene_pep column
        base_row['evalue'] = ''  # Empty for base row
        base_row['gap'] = ''  # Empty for base row
        result_rows.append(base_row)

        # Process group columns in sets of 4
        for i in range(8, len(df.columns), 4):
            group_cols = df.columns[i:i+4]
            if len(group_cols) < 4:
                continue  # Skip incomplete groups
            
            name_suffix = group_cols[0].rsplit('_', 1)[0]  # Extract name suffix (e.g., '1_BLO90_6_2')
            transformed_row = {
                'Chromosome': row['Chromosome'],
                'Start': row[group_cols[0]],  # Use *_sstart for Start
                'End': row[group_cols[1]],  # Use *_send for End
                'qseq': '',  # Empty for transformed row
                'Name': f"{row['gene_pep']}_{name_suffix}",
                'Gap': '',  # Empty for transformed row
                'CDS': '',  # Empty for transformed row
                'gene': '',  # Empty for transformed row
                'evalue': row[group_cols[2]],
                'gap': row[group_cols[3]]
            }
            result_rows.append(transformed_row)
    
    # Convert transformed data to DataFrame
    df_result = pd.DataFrame(result_rows)
    
    # Write output to Excel with two worksheets
    with pd.ExcelWriter(output_file) as writer:
        df_result.to_excel(writer, sheet_name='Alignment| Suppl_Table_S1', index=False)
        
        # Create Metadata sheet
        metadata = pd.DataFrame({
            'Field': ['Crop', 'parentName', 'Reference', 'DOI'],
            'Alignment| Suppl_Table_S1': ['Wheat', 'Wheat_CSv2.1_Genes-HC', 'Int. J. Mol. Sci. 2024, 25(16), 8614', 'https://doi.org/10.3390/ijms25168614']
        })
        metadata.to_excel(writer, sheet_name='Metadata', index=False)

# Example usage
process_supplementary_table('supplementary-tables.xlsx', 'processed_output.xlsx')
